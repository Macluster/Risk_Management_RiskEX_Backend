//// <auto-generated />
//using System;
//using Microsoft.EntityFrameworkCore;
//using Microsoft.EntityFrameworkCore.Infrastructure;
//using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
//using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
//using Risk_Management_RiskEX_Backend.Data;

//#nullable disable

//namespace Risk_Management_RiskEX_Backend.Migrations
//{
//    [DbContext(typeof(ApplicationDBContext))]
//    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
//    {
//        protected override void BuildModel(ModelBuilder modelBuilder)
//        {
//#pragma warning disable 612, 618
//            modelBuilder
//                .HasAnnotation("ProductVersion", "8.0.7")
//                .HasAnnotation("Relational:MaxIdentifierLength", 63);

//            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
//                {
//                    b.Property<string>("Id")
//                        .HasColumnType("text");

//                    b.Property<string>("ConcurrencyStamp")
//                        .IsConcurrencyToken()
//                        .HasColumnType("text");

//                    b.Property<string>("Name")
//                        .HasMaxLength(256)
//                        .HasColumnType("character varying(256)");

//                    b.Property<string>("NormalizedName")
//                        .HasMaxLength(256)
//                        .HasColumnType("character varying(256)");

//                    b.HasKey("Id");

//                    b.HasIndex("NormalizedName")
//                        .IsUnique()
//                        .HasDatabaseName("RoleNameIndex");

//                    b.ToTable("AspNetRoles", (string)null);
//                });

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<string>("ClaimType")
//                        .HasColumnType("text");

//                    b.Property<string>("ClaimValue")
//                        .HasColumnType("text");

//                    b.Property<string>("RoleId")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.HasKey("Id");

//                    b.HasIndex("RoleId");

//                    b.ToTable("AspNetRoleClaims", (string)null);
//                });

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
//                {
//                    b.Property<string>("Id")
//                        .HasColumnType("text");

//                    b.Property<int>("AccessFailedCount")
//                        .HasColumnType("integer");

//                    b.Property<string>("ConcurrencyStamp")
//                        .IsConcurrencyToken()
//                        .HasColumnType("text");

//                    b.Property<string>("Email")
//                        .HasMaxLength(256)
//                        .HasColumnType("character varying(256)");

//                    b.Property<bool>("EmailConfirmed")
//                        .HasColumnType("boolean");

//                    b.Property<bool>("LockoutEnabled")
//                        .HasColumnType("boolean");

//                    b.Property<DateTimeOffset?>("LockoutEnd")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<string>("NormalizedEmail")
//                        .HasMaxLength(256)
//                        .HasColumnType("character varying(256)");

//                    b.Property<string>("NormalizedUserName")
//                        .HasMaxLength(256)
//                        .HasColumnType("character varying(256)");

//                    b.Property<string>("PasswordHash")
//                        .HasColumnType("text");

//                    b.Property<string>("PhoneNumber")
//                        .HasColumnType("text");

//                    b.Property<bool>("PhoneNumberConfirmed")
//                        .HasColumnType("boolean");

//                    b.Property<string>("SecurityStamp")
//                        .HasColumnType("text");

//                    b.Property<bool>("TwoFactorEnabled")
//                        .HasColumnType("boolean");

//                    b.Property<string>("UserName")
//                        .HasMaxLength(256)
//                        .HasColumnType("character varying(256)");

//                    b.HasKey("Id");

//                    b.HasIndex("NormalizedEmail")
//                        .HasDatabaseName("EmailIndex");

//                    b.HasIndex("NormalizedUserName")
//                        .IsUnique()
//                        .HasDatabaseName("UserNameIndex");

//                    b.ToTable("AspNetUsers", (string)null);
//                });

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<string>("ClaimType")
//                        .HasColumnType("text");

//                    b.Property<string>("ClaimValue")
//                        .HasColumnType("text");

//                    b.Property<string>("UserId")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.HasKey("Id");

//                    b.HasIndex("UserId");

//                    b.ToTable("AspNetUserClaims", (string)null);
//                });

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
//                {
//                    b.Property<string>("LoginProvider")
//                        .HasColumnType("text");

//                    b.Property<string>("ProviderKey")
//                        .HasColumnType("text");

//                    b.Property<string>("ProviderDisplayName")
//                        .HasColumnType("text");

//                    b.Property<string>("UserId")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.HasKey("LoginProvider", "ProviderKey");

//                    b.HasIndex("UserId");

//                    b.ToTable("AspNetUserLogins", (string)null);
//                });

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
//                {
//                    b.Property<string>("UserId")
//                        .HasColumnType("text");

//                    b.Property<string>("RoleId")
//                        .HasColumnType("text");

//                    b.HasKey("UserId", "RoleId");

//                    b.HasIndex("RoleId");

//                    b.ToTable("AspNetUserRoles", (string)null);
//                });

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
//                {
//                    b.Property<string>("UserId")
//                        .HasColumnType("text");

//                    b.Property<string>("LoginProvider")
//                        .HasColumnType("text");

//                    b.Property<string>("Name")
//                        .HasColumnType("text");

//                    b.Property<string>("Value")
//                        .HasColumnType("text");

//                    b.HasKey("UserId", "LoginProvider", "Name");

//                    b.ToTable("AspNetUserTokens", (string)null);
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentBasis", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<string>("Basis")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<DateTime?>("CreatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<DateTime?>("UpdatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.HasKey("Id");

//                    b.ToTable("AssessmentsBasis");

//                    b.HasData(
//                        new
//                        {
//                            Id = 1,
//                            Basis = "Confidentiality",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7177),
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7177)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9057),
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9058)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 2,
//                            Basis = "Integrity",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7179),
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7179)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9060),
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9061)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 3,
//                            Basis = "Privacy",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7180),
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7181)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9062),
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9063)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 4,
//                            Basis = "Quality",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7182),
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7182)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9065),
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9066)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        });
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixImpact", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<string>("AssessmentFactor")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<DateTime?>("CreatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<string>("Definition")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<double>("Impact")
//                        .HasColumnType("double precision");

//                    b.Property<DateTime?>("UpdatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.HasKey("Id");

//                    b.ToTable("AssessmentsMatrixImpact");

//                    b.HasData(
//                        new
//                        {
//                            Id = 1,
//                            AssessmentFactor = "Low",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7238),
//                            Definition = "No/slight effect on business",
//                            Impact = 10.0,
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7238)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9197),
//                            Impact = 10.0,
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9198)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 2,
//                            AssessmentFactor = "Medium",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7240),
//                            Definition = "business objectives affected",
//                            Impact = 20.0,
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7240)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9200),
//                            Impact = 20.0,
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9201)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 3,
//                            AssessmentFactor = "High",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7241),
//                            Definition = "business objectives undermined",
//                            Impact = 40.0,
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7242)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9203),
//                            Impact = 40.0,
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9204)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 4,
//                            AssessmentFactor = "Critical",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7243),
//                            Definition = "business objectives not accomplished",
//                            Impact = 60.0,
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7244)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9206),
//                            Impact = 60.0,
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9207)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        });
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixLikelihood", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<string>("AssessmentFactor")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<DateTime?>("CreatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<string>("Definition")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<double>("Likelihood")
//                        .HasColumnType("double precision");

//                    b.Property<DateTime?>("UpdatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.HasKey("Id");

//                    b.ToTable("AssessmentsMatrixLikelihood");

//                    b.HasData(
//                        new
//                        {
//                            Id = 1,
//                            AssessmentFactor = "Low",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7266),
//                            Definition = "1-24% chance of occurrence",
//                            Likelihood = 0.10000000000000001,
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7267)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9238),
//                            Likelihood = 0.10000000000000001,
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9239)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 2,
//                            AssessmentFactor = "Medium",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7268),
//                            Definition = "25-49% chance of occurrence",
//                            Likelihood = 0.20000000000000001,
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7269)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9242),
//                            Likelihood = 0.20000000000000001,
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9242)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 3,
//                            AssessmentFactor = "High",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7270),
//                            Definition = "50-74% chance of occurrence",
//                            Likelihood = 0.40000000000000002,
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7271)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9244),
//                            Likelihood = 0.40000000000000002,
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9245)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 4,
//                            AssessmentFactor = "Critical",
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7272),
//                            Definition = "75-99% chance of occurrence",
//                            Likelihood = 0.59999999999999998,
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7272)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9247),
//                            Likelihood = 0.59999999999999998,
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9247)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        });
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Department", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<DateTime?>("CreatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<string>("DepartmentName")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<DateTime?>("UpdatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.HasKey("Id");

//                    b.ToTable("Departments");

//                    b.HasData(
//                        new
//                        {
//                            Id = 1,
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(6934),
//                            DepartmentName = "SFM",
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(6940)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8600),
//                            DepartmentName = "SFM",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8605)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 2,
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(6942),
//                            DepartmentName = "HR",
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(6942)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8608),
//                            DepartmentName = "HR",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8609)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 3,
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(6944),
//                            DepartmentName = "Finance",
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(6944)
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8611),
//                            DepartmentName = "Finance",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8611)
//                        },
//                        new
//                        {
//                            Id = 4,
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8613),
//                            DepartmentName = "IT",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8614)
//                        },
//                        new
//                        {
//                            Id = 5,
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8616),
//                            DepartmentName = "Marketing",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8617)
//                        },
//                        new
//                        {
//                            Id = 6,
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8619),
//                            DepartmentName = "Sales",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8621)
//                        },
//                        new
//                        {
//                            Id = 7,
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8622),
//                            DepartmentName = "Customer Support",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8623)
//                        },
//                        new
//                        {
//                            Id = 8,
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8625),
//                            DepartmentName = "Operations",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8626)
//                        },
//                        new
//                        {
//                            Id = 9,
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8627),
//                            DepartmentName = "Legal",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8628)
//                        },
//                        new
//                        {
//                            Id = 10,
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8630),
//                            DepartmentName = "Research & Development",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8631)
//                        },
//                        new
//                        {
//                            Id = 11,
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8633),
//                            DepartmentName = "Procurement",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8634)
//                        },
//                        new
//                        {
//                            Id = 12,
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8635),
//                            DepartmentName = "Quality Assurance",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8636)
//                        },
//                        new
//                        {
//                            Id = 13,
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8638),
//                            DepartmentName = "Training",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8638)
//                        },
//                        new
//                        {
//                            Id = 14,
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8640),
//                            DepartmentName = "Public Relations",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(8641)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        });
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.ExternalReviewer", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<DateTime?>("CreatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("CreatedById")
//                        .HasColumnType("integer");

//                    b.Property<int>("DepartmentId")
//                        .HasColumnType("integer");

//                    b.Property<string>("Email")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<string>("FullName")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<DateTime?>("UpdatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("UpdatedById")
//                        .HasColumnType("integer");

//                    b.HasKey("Id");

//                    b.HasIndex("CreatedById");

//                    b.HasIndex("DepartmentId");

//                    b.HasIndex("UpdatedById");

//                    b.ToTable("ExternalReviewers");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Project", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<DateTime?>("CreatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("CreatedById")
//                        .HasColumnType("integer");

//                    b.Property<int>("DepartmentId")
//                        .HasColumnType("integer");

//                    b.Property<string>("Name")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<DateTime?>("UpdatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("UpdatedById")
//                        .HasColumnType("integer");

//                    b.Property<int?>("UserId")
//                        .HasColumnType("integer");

//                    b.HasKey("Id");

//                    b.HasIndex("CreatedById");

//                    b.HasIndex("DepartmentId");

//                    b.HasIndex("UpdatedById");

//                    b.HasIndex("UserId");

//                    b.ToTable("Projects");

//                    b.HasData(
//                        new
//                        {
//                            Id = 1,
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7209),
//                            CreatedById = 1,
//                            DepartmentId = 1,
//                            Name = "Data Center Migration",
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7210),
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9162),
//                            CreatedById = 1,
//                            DepartmentId = 1,
//                            Name = "Data Center Migration",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9163),
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                            UpdatedById = 1,
//                            UserId = 1
//                        },
//                        new
//                        {
//                            Id = 2,
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7212),
//                            CreatedById = 1,
//                            DepartmentId = 2,
//                            Name = "HR Inventory",
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7213),
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9167),
//                            CreatedById = 1,
//                            DepartmentId = 2,
//                            Name = "HR Inventory",
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9168),
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                            UpdatedById = 1,
//                            UserId = 2
//                        });
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Review", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<string>("Comments")
//                        .HasMaxLength(250)
//                        .HasColumnType("character varying(250)");

//                    b.Property<DateTime?>("CreatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("CreatedById")
//                        .HasColumnType("integer");

//                    b.Property<int>("ExternalReviewerId")
//                        .HasColumnType("integer");

//                    b.Property<int>("ReviewStatus")
//                        .HasColumnType("integer");

//                    b.Property<DateTime?>("UpdatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("UpdatedById")
//                        .HasColumnType("integer");

//                    b.Property<int>("UserId")
//                        .HasColumnType("integer");

//                    b.HasKey("Id");

//                    b.HasIndex("CreatedById");

//                    b.HasIndex("ExternalReviewerId");

//                    b.HasIndex("UpdatedById");

//                    b.HasIndex("UserId");

//                    b.ToTable("Reviews");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Risk", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<DateTime?>("ClosedDate")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<string>("Contingency")
//                        .IsRequired()
//                        .HasMaxLength(1000)
//                        .HasColumnType("character varying(1000)");

//                    b.Property<DateTime?>("CreatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("CreatedById")
//                        .HasColumnType("integer");

//                    b.Property<int>("DepartmentId")
//                        .HasColumnType("integer");

//                    b.Property<string>("Description")
//                        .IsRequired()
//                        .HasMaxLength(1000)
//                        .HasColumnType("character varying(1000)");

//                    b.Property<string>("Impact")
//                        .IsRequired()
//                        .HasMaxLength(1000)
//                        .HasColumnType("character varying(1000)");

//                    b.Property<string>("Mitigation")
//                        .IsRequired()
//                        .HasMaxLength(1000)
//                        .HasColumnType("character varying(1000)");

//                    b.Property<int>("OverallRiskRating")
//                        .HasColumnType("integer");

//                    b.Property<DateTime?>("PlannedActionDate")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("ProjectId")
//                        .HasColumnType("integer");

//                    b.Property<string>("Remarks")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<int>("ResponsibleUserId")
//                        .HasColumnType("integer");

//                    b.Property<string>("RiskId")
//                        .IsRequired()
//                        .HasMaxLength(20)
//                        .HasColumnType("character varying(20)");

//                    b.Property<string>("RiskName")
//                        .IsRequired()
//                        .HasMaxLength(50)
//                        .HasColumnType("character varying(50)");

//                    b.Property<int>("RiskResponse")
//                        .HasColumnType("integer");

//                    b.Property<int>("RiskStatus")
//                        .HasColumnType("integer");

//                    b.Property<int>("RiskType")
//                        .HasColumnType("integer");

//                    b.Property<DateTime?>("UpdatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("UpdatedById")
//                        .HasColumnType("integer");

//                    b.HasKey("Id");

//                    b.HasIndex("CreatedById");

//                    b.HasIndex("DepartmentId");

//                    b.HasIndex("ProjectId");

//                    b.HasIndex("ResponsibleUserId");

//                    b.HasIndex("UpdatedById");

//                    b.ToTable("Risks");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.RiskAssessment", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<int?>("AssessmentBasisId")
//                        .HasColumnType("integer");

//                    b.Property<DateTime?>("CreatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("CreatedById")
//                        .HasColumnType("integer");

//                    b.Property<int>("Impact")
//                        .HasColumnType("integer");

//                    b.Property<bool>("IsMitigated")
//                        .HasColumnType("boolean");

//                    b.Property<int>("Likelihood")
//                        .HasColumnType("integer");

//                    b.Property<int>("ReviewId")
//                        .HasColumnType("integer");

//                    b.Property<int>("RiskFactor")
//                        .HasColumnType("integer");

//                    b.Property<int>("RiskId")
//                        .HasColumnType("integer");

//                    b.Property<DateTime?>("UpdatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("UpdatedById")
//                        .HasColumnType("integer");

//                    b.HasKey("Id");

//                    b.HasIndex("AssessmentBasisId");

//                    b.HasIndex("CreatedById");

//                    b.HasIndex("Impact");

//                    b.HasIndex("Likelihood");

//                    b.HasIndex("ReviewId");

//                    b.HasIndex("RiskId");

//                    b.HasIndex("UpdatedById");

//                    b.ToTable("Assessments");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.RiskResponseData", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<string>("Description")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<string>("Example")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<string>("Name")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.HasKey("Id");

//                    b.ToTable("RiskResponseDatas");

//                    b.HasData(
//                        new
//                        {
//                            Id = 1,
//                            Description = "This strategy aims to eliminate the risk entirely by taking actions that prevent the risk from occurring. It involves altering project plans or processes to steer clear of the risk's potential impact.",
//                            Example = "Changing a project scope to exclude a high-risk feature that could lead to technical challenges.",
//                            Name = "Avoid"
//                        },
//                        new
//                        {
//                            Id = 2,
//                            Description = "Mitigation involves taking proactive steps to reduce the likelihood or impact of a risk. It focuses on minimizing the risk's negative effects while still allowing the project or function to move forward.",
//                            Example = "Developing a backup system to reduce the impact of potential server failures.",
//                            Name = "Mitigate"
//                        },
//                        new
//                        {
//                            Id = 3,
//                            Description = "Transferring the risk involves shifting the responsibility for managing the risk to another party. This could be achieved through insurance, outsourcing, partnerships, or contracts.",
//                            Example = "Purchasing insurance to cover financial losses due to unforeseen events.",
//                            Name = "Transfer"
//                        },
//                        new
//                        {
//                            Id = 4,
//                            Description = "Accepting the risk means acknowledging its existence and choosing not to take specific actions to mitigate or avoid it.",
//                            Example = "Deciding not to invest in additional security for a low-value system because the cost of mitigation exceeds the potential impact of the risk.",
//                            Name = "Accept"
//                        });
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.User", b =>
//                {
//                    b.Property<int>("Id")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

//                    b.Property<DateTime?>("CreatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("CreatedById")
//                        .HasColumnType("integer");

//                    b.Property<int>("DepartmentId")
//                        .HasColumnType("integer");

//                    b.Property<string>("Email")
//                        .IsRequired()
//                        .HasColumnType("text");

//                    b.Property<string>("FullName")
//                        .IsRequired()
//                        .HasMaxLength(30)
//                        .HasColumnType("character varying(30)");

//                    b.Property<bool>("IsActive")
//                        .HasColumnType("boolean");

//                    b.Property<string>("Password")
//                        .IsRequired()
//                        .HasMaxLength(30)
//                        .HasColumnType("character varying(30)");

//                    b.Property<DateTime?>("UpdatedAt")
//                        .HasColumnType("timestamp with time zone");

//                    b.Property<int?>("UpdatedById")
//                        .HasColumnType("integer");

//                    b.HasKey("Id");

//                    b.HasIndex("CreatedById");

//                    b.HasIndex("DepartmentId");

//                    b.HasIndex("UpdatedById");

//                    b.ToTable("Users");

//                    b.HasData(
//                        new
//                        {
//                            Id = 1,
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7146),
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9003),
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                            DepartmentId = 1,
//                            Email = "admin@riskex.com",
//                            FullName = "System Admin",
//                            IsActive = true,
//                            Password = "Admin@123",
//<<<<<<< HEAD
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7147)
//=======
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9009)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        },
//                        new
//                        {
//                            Id = 2,
//<<<<<<< HEAD
//                            CreatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7149),
//=======
//                            CreatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9015),
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                            DepartmentId = 1,
//                            Email = "risk.manager@riskex.com",
//                            FullName = "Risk Manager",
//                            IsActive = true,
//                            Password = "Risk@123",
//<<<<<<< HEAD
//                            UpdatedAt = new DateTime(2024, 12, 26, 16, 56, 9, 720, DateTimeKind.Utc).AddTicks(7150)
//=======
//                            UpdatedAt = new DateTime(2024, 12, 26, 15, 0, 29, 793, DateTimeKind.Utc).AddTicks(9015)
//>>>>>>> 64e2eb6f6edb092317bd5db9ed96619c395f4535
//                        });
//                });

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
//                {
//                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
//                        .WithMany()
//                        .HasForeignKey("RoleId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();
//                });

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
//                {
//                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
//                        .WithMany()
//                        .HasForeignKey("UserId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();
//                });

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
//                {
//                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
//                        .WithMany()
//                        .HasForeignKey("UserId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();
//                });

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
//                {
//                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
//                        .WithMany()
//                        .HasForeignKey("RoleId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
//                        .WithMany()
//                        .HasForeignKey("UserId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();
//                });

//            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
//                {
//                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
//                        .WithMany()
//                        .HasForeignKey("UserId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.ExternalReviewer", b =>
//                {
//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
//                        .WithMany("CreatedExternalReviewers")
//                        .HasForeignKey("CreatedById");

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Department", "Department")
//                        .WithMany("ExternalReviewers")
//                        .HasForeignKey("DepartmentId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
//                        .WithMany("UpdatedExternalReviewers")
//                        .HasForeignKey("UpdatedById");

//                    b.Navigation("CreatedBy");

//                    b.Navigation("Department");

//                    b.Navigation("UpdatedBy");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Project", b =>
//                {
//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
//                        .WithMany("CreatedProjects")
//                        .HasForeignKey("CreatedById");

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Department", "Department")
//                        .WithMany("Projects")
//                        .HasForeignKey("DepartmentId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
//                        .WithMany("UpdatedProjects")
//                        .HasForeignKey("UpdatedById");

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "User")
//                        .WithMany("Projects")
//                        .HasForeignKey("UserId");

//                    b.Navigation("CreatedBy");

//                    b.Navigation("Department");

//                    b.Navigation("UpdatedBy");

//                    b.Navigation("User");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Review", b =>
//                {
//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
//                        .WithMany("CreatedReviews")
//                        .HasForeignKey("CreatedById");

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.ExternalReviewer", "ExternalReviewer")
//                        .WithMany("Reviews")
//                        .HasForeignKey("ExternalReviewerId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
//                        .WithMany("UpdatedReviews")
//                        .HasForeignKey("UpdatedById");

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "User")
//                        .WithMany("Reviews")
//                        .HasForeignKey("UserId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.Navigation("CreatedBy");

//                    b.Navigation("ExternalReviewer");

//                    b.Navigation("UpdatedBy");

//                    b.Navigation("User");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Risk", b =>
//                {
//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
//                        .WithMany("CreatedRisks")
//                        .HasForeignKey("CreatedById");

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Department", "Department")
//                        .WithMany("Risks")
//                        .HasForeignKey("DepartmentId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Project", "Project")
//                        .WithMany("Risks")
//                        .HasForeignKey("ProjectId");

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "ResponsibleUser")
//                        .WithMany("ResponsibleRisks")
//                        .HasForeignKey("ResponsibleUserId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
//                        .WithMany("UpdatedRisks")
//                        .HasForeignKey("UpdatedById");

//                    b.Navigation("CreatedBy");

//                    b.Navigation("Department");

//                    b.Navigation("Project");

//                    b.Navigation("ResponsibleUser");

//                    b.Navigation("UpdatedBy");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.RiskAssessment", b =>
//                {
//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.AssessmentBasis", "AssessmentBasis")
//                        .WithMany("RiskAssessments")
//                        .HasForeignKey("AssessmentBasisId");

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
//                        .WithMany()
//                        .HasForeignKey("CreatedById");

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixImpact", "MatrixImpact")
//                        .WithMany("RiskAssessments")
//                        .HasForeignKey("Impact")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixLikelihood", "MatrixLikelihood")
//                        .WithMany("RiskAssessments")
//                        .HasForeignKey("Likelihood")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Review", "Review")
//                        .WithMany("RiskAssessments")
//                        .HasForeignKey("ReviewId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Risk", "Risk")
//                        .WithMany("RiskAssessments")
//                        .HasForeignKey("RiskId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
//                        .WithMany()
//                        .HasForeignKey("UpdatedById");

//                    b.Navigation("AssessmentBasis");

//                    b.Navigation("CreatedBy");

//                    b.Navigation("MatrixImpact");

//                    b.Navigation("MatrixLikelihood");

//                    b.Navigation("Review");

//                    b.Navigation("Risk");

//                    b.Navigation("UpdatedBy");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.User", b =>
//                {
//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
//                        .WithMany("CreatedUsers")
//                        .HasForeignKey("CreatedById");

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Department", "Department")
//                        .WithMany("Users")
//                        .HasForeignKey("DepartmentId")
//                        .OnDelete(DeleteBehavior.Cascade)
//                        .IsRequired();

//                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
//                        .WithMany("UpdatedUsers")
//                        .HasForeignKey("UpdatedById");

//                    b.Navigation("CreatedBy");

//                    b.Navigation("Department");

//                    b.Navigation("UpdatedBy");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentBasis", b =>
//                {
//                    b.Navigation("RiskAssessments");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixImpact", b =>
//                {
//                    b.Navigation("RiskAssessments");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixLikelihood", b =>
//                {
//                    b.Navigation("RiskAssessments");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Department", b =>
//                {
//                    b.Navigation("ExternalReviewers");

//                    b.Navigation("Projects");

//                    b.Navigation("Risks");

//                    b.Navigation("Users");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.ExternalReviewer", b =>
//                {
//                    b.Navigation("Reviews");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Project", b =>
//                {
//                    b.Navigation("Risks");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Review", b =>
//                {
//                    b.Navigation("RiskAssessments");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Risk", b =>
//                {
//                    b.Navigation("RiskAssessments");
//                });

//            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.User", b =>
//                {
//                    b.Navigation("CreatedExternalReviewers");

//                    b.Navigation("CreatedProjects");

//                    b.Navigation("CreatedReviews");

//                    b.Navigation("CreatedRisks");

//                    b.Navigation("CreatedUsers");

//                    b.Navigation("Projects");

//                    b.Navigation("ResponsibleRisks");

//                    b.Navigation("Reviews");

//                    b.Navigation("UpdatedExternalReviewers");

//                    b.Navigation("UpdatedProjects");

//                    b.Navigation("UpdatedReviews");

//                    b.Navigation("UpdatedRisks");

//                    b.Navigation("UpdatedUsers");
//                });
//#pragma warning restore 612, 618
//        }
//    }
//}
