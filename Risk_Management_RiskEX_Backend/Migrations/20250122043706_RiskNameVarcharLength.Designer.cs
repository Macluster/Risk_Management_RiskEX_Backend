// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Risk_Management_RiskEX_Backend.Data;

#nullable disable

namespace Risk_Management_RiskEX_Backend.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250122043706_RiskNameVarcharLength")]
    partial class RiskNameVarcharLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentBasis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Basis")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.ToTable("AssessmentsBasis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Basis = "Confidentiality",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9355),
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9356)
                        },
                        new
                        {
                            Id = 2,
                            Basis = "Integrity",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9358),
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9360)
                        },
                        new
                        {
                            Id = 3,
                            Basis = "Availability",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9362),
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9363)
                        },
                        new
                        {
                            Id = 4,
                            Basis = "Privacy",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9365),
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9366)
                        });
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixImpact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessmentFactor")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<double>("Impact")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.ToTable("AssessmentsMatrixImpact");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentFactor = "Low",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9516),
                            Definition = "No/slight effect on business",
                            Impact = 10.0,
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9517)
                        },
                        new
                        {
                            Id = 2,
                            AssessmentFactor = "Medium",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9521),
                            Definition = "business objectives affected",
                            Impact = 20.0,
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9522)
                        },
                        new
                        {
                            Id = 3,
                            AssessmentFactor = "High",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9524),
                            Definition = "business objectives undermined",
                            Impact = 40.0,
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9525)
                        },
                        new
                        {
                            Id = 4,
                            AssessmentFactor = "Critical",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9527),
                            Definition = "business objectives not accomplished",
                            Impact = 60.0,
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9528)
                        });
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixLikelihood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessmentFactor")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<double>("Likelihood")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.ToTable("AssessmentsMatrixLikelihood");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentFactor = "Low",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9570),
                            Definition = "1-24% chance of occurrence",
                            Likelihood = 0.10000000000000001,
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9571)
                        },
                        new
                        {
                            Id = 2,
                            AssessmentFactor = "Medium",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9574),
                            Definition = "25-49% chance of occurrence",
                            Likelihood = 0.20000000000000001,
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9575)
                        },
                        new
                        {
                            Id = 3,
                            AssessmentFactor = "High",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9578),
                            Definition = "50-74% chance of occurrence",
                            Likelihood = 0.40000000000000002,
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9579)
                        },
                        new
                        {
                            Id = 4,
                            AssessmentFactor = "Critical",
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9582),
                            Definition = "75-99% chance of occurrence",
                            Likelihood = 0.59999999999999998,
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9583)
                        });
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("NewName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8890),
                            DepartmentName = "SFM",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8897)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8900),
                            DepartmentName = "HR",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8901)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8904),
                            DepartmentName = "Finance",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8905)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8907),
                            DepartmentName = "Admin & Purchase",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8908)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8910),
                            DepartmentName = "DU1",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8911)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8914),
                            DepartmentName = "DU2",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8915)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8917),
                            DepartmentName = "DU3",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8918)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8920),
                            DepartmentName = "DU4",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8921)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8923),
                            DepartmentName = "DU5",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8924)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8926),
                            DepartmentName = "DU6",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8927)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8929),
                            DepartmentName = "Data & Analytics",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8930)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8932),
                            DepartmentName = "Design Services",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8933)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8936),
                            DepartmentName = "Testing Services",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8937)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8939),
                            DepartmentName = "Marketing",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8940)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8942),
                            DepartmentName = "Business Solution Group",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8950)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8957),
                            DepartmentName = "Learning & Development",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8958)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8960),
                            DepartmentName = "Audits & Compliance",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(8961)
                        });
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.ExternalReviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ExternalReviewers");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ProjectCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9416),
                            CreatedById = 1,
                            DepartmentId = 1,
                            Name = "Data Center Migration",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9417),
                            UpdatedById = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9421),
                            CreatedById = 1,
                            DepartmentId = 2,
                            Name = "HR Inventory",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9422),
                            UpdatedById = 1
                        });
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<int?>("ExternalReviewerId")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ExternalReviewerId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Risk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Contingency")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Impact")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Mitigation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("OverallRiskRatingAfter")
                        .HasColumnType("integer");

                    b.Property<int>("OverallRiskRatingBefore")
                        .HasColumnType("integer");

                    b.Property<double?>("PercentageRedution")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("PlannedActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int?>("ResidualRisk")
                        .HasColumnType("integer");

                    b.Property<int?>("ResidualValue")
                        .HasColumnType("integer");

                    b.Property<int>("ResponsibleUserId")
                        .HasColumnType("integer");

                    b.Property<string>("RiskId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RiskName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("RiskResponseId")
                        .HasColumnType("integer");

                    b.Property<int>("RiskStatus")
                        .HasColumnType("integer");

                    b.Property<int>("RiskType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResponsibleUserId");

                    b.HasIndex("RiskResponseId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Risks");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.RiskAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssessmentBasisId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<int>("Impact")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMitigated")
                        .HasColumnType("boolean");

                    b.Property<int>("Likelihood")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewId")
                        .HasColumnType("integer");

                    b.Property<int>("RiskFactor")
                        .HasColumnType("integer");

                    b.Property<int>("RiskId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentBasisId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Impact");

                    b.HasIndex("Likelihood");

                    b.HasIndex("ReviewId");

                    b.HasIndex("RiskId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.RiskResponseData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Example")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RiskResponseDatas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "This strategy aims to eliminate the risk entirely by taking actions that prevent the risk from occurring. It involves altering project plans or processes to steer clear of the risk's potential impact.",
                            Example = "Changing a project scope to exclude a high-risk feature that could lead to technical challenges.",
                            Name = "Avoid"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Mitigation involves taking proactive steps to reduce the likelihood or impact of a risk. It focuses on minimizing the risk's negative effects while still allowing the project or function to move forward.",
                            Example = "Developing a backup system to reduce the impact of potential server failures.",
                            Name = "Mitigate"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Transferring the risk involves shifting the responsibility for managing the risk to another party. This could be achieved through insurance, outsourcing, partnerships, or contracts.",
                            Example = "Purchasing insurance to cover financial losses due to unforeseen events.",
                            Name = "Transfer"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Accepting the risk means acknowledging its existence and choosing not to take specific actions to mitigate or avoid it.",
                            Example = "Deciding not to invest in additional security for a low-value system because the cost of mitigation exceeds the potential impact of the risk.",
                            Name = "Accept"
                        });
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9302),
                            DepartmentId = 17,
                            Email = "admin@gmail.com",
                            FullName = "System Admin",
                            IsActive = true,
                            Password = "admin@123",
                            UpdatedAt = new DateTime(2025, 1, 22, 4, 37, 4, 524, DateTimeKind.Utc).AddTicks(9304)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.ExternalReviewer", b =>
                {
                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
                        .WithMany("CreatedExternalReviewers")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Department", "Department")
                        .WithMany("ExternalReviewers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
                        .WithMany("UpdatedExternalReviewers")
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Project", b =>
                {
                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
                        .WithMany("UpdatedProjects")
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Review", b =>
                {
                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
                        .WithMany("CreatedReviews")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.ExternalReviewer", "ExternalReviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ExternalReviewerId");

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
                        .WithMany("UpdatedReviews")
                        .HasForeignKey("UpdatedById");

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ExternalReviewer");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Risk", b =>
                {
                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
                        .WithMany("CreatedRisks")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Department", "Department")
                        .WithMany("Risks")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Project", "Project")
                        .WithMany("Risks")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "ResponsibleUser")
                        .WithMany("ResponsibleRisks")
                        .HasForeignKey("ResponsibleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.RiskResponseData", "RiskResponseData")
                        .WithMany("Risks")
                        .HasForeignKey("RiskResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
                        .WithMany("UpdatedRisks")
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("Project");

                    b.Navigation("ResponsibleUser");

                    b.Navigation("RiskResponseData");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.RiskAssessment", b =>
                {
                    b.HasOne("Risk_Management_RiskEX_Backend.Models.AssessmentBasis", "AssessmentBasis")
                        .WithMany("RiskAssessments")
                        .HasForeignKey("AssessmentBasisId");

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixImpact", "MatrixImpact")
                        .WithMany("RiskAssessments")
                        .HasForeignKey("Impact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixLikelihood", "MatrixLikelihood")
                        .WithMany("RiskAssessments")
                        .HasForeignKey("Likelihood")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Review", "Review")
                        .WithMany("RiskAssessments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Risk", "Risk")
                        .WithMany("RiskAssessments")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("AssessmentBasis");

                    b.Navigation("CreatedBy");

                    b.Navigation("MatrixImpact");

                    b.Navigation("MatrixLikelihood");

                    b.Navigation("Review");

                    b.Navigation("Risk");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.User", b =>
                {
                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "CreatedBy")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedById");

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Risk_Management_RiskEX_Backend.Models.User", "UpdatedBy")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentBasis", b =>
                {
                    b.Navigation("RiskAssessments");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixImpact", b =>
                {
                    b.Navigation("RiskAssessments");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.AssessmentMatrixLikelihood", b =>
                {
                    b.Navigation("RiskAssessments");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Department", b =>
                {
                    b.Navigation("ExternalReviewers");

                    b.Navigation("Projects");

                    b.Navigation("Risks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.ExternalReviewer", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Project", b =>
                {
                    b.Navigation("Risks");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Review", b =>
                {
                    b.Navigation("RiskAssessments");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.Risk", b =>
                {
                    b.Navigation("RiskAssessments");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.RiskResponseData", b =>
                {
                    b.Navigation("Risks");
                });

            modelBuilder.Entity("Risk_Management_RiskEX_Backend.Models.User", b =>
                {
                    b.Navigation("CreatedExternalReviewers");

                    b.Navigation("CreatedProjects");

                    b.Navigation("CreatedReviews");

                    b.Navigation("CreatedRisks");

                    b.Navigation("CreatedUsers");

                    b.Navigation("ResponsibleRisks");

                    b.Navigation("Reviews");

                    b.Navigation("UpdatedExternalReviewers");

                    b.Navigation("UpdatedProjects");

                    b.Navigation("UpdatedReviews");

                    b.Navigation("UpdatedRisks");

                    b.Navigation("UpdatedUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
